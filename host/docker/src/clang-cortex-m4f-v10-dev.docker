FROM clang:v10-dev as clang
FROM newlib:v3.1.0 as newlib

FROM llvm-aarch32:v10-dev-10 as builder
RUN apk update
RUN apk add build-base ninja cmake git patch vim python3 curl
COPY --from=clang /toolchain/llvm /toolchain/llvm
COPY --from=newlib /toolchain/newlib /toolchain/newlib
WORKDIR /toolchain

ENV CLANG10PATH=/usr/local/clang10
ENV xtarget=armv7em-none-eabi
ENV xcpu=cortex-m4
ENV xcpudir=cortex-m4f
ENV xfpu="-mfloat-abi=hard -mfpu=fpv4-sp-d16"
ENV PATH=$PATH:${CLANG10PATH}/bin
LABEL description="Build Cortex-M4F libraries"
LABEL maintainer="Emmanuel Blot <emmanuel.blot@free.fr>"

ENV prefix=${CLANG10PATH}
ENV xabi="-mthumb -mabi=aapcs -fshort-enums"
ENV xopts="-g -Os"
ENV xcfeatures="-ffunction-sections -fdata-sections -fno-stack-protector -fvisibility=hidden"
ENV xcxxfeatures="${xcfeatures} -fno-use-cxa-atexit"
ENV xctarget="-mcpu=${xcpu} ${xabi}"
ENV xsysroot="${prefix}/${xtarget}/${xcpudir}"
ENV xcxxdefs="-D_LIBUNWIND_IS_BAREMETAL=1 -D_GNU_SOURCE=1 -D_POSIX_TIMERS=1 -D_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION"
ENV xcxxnothread="-D_LIBCPP_HAS_NO_THREADS=1"
ENV xcxx_inc="-I${xsysroot}/include"
ENV xcxx_lib="-L${xsysroot}/lib"
ENV xcflags="${xctarget} ${xfpu} ${xopts} ${xcfeatures}"
ENV xcxxflags="${xctarget} ${xfpu} ${xopts} ${xcxxfeatures} ${xcxxdefs} ${xcxx_inc}"

ENV CC_FOR_TARGET=${CLANG10PATH}/bin/clang
ENV AR_FOR_TARGET=${CLANG10PATH}/bin/llvm-ar
ENV NM_FOR_TARGET=${CLANG10PATH}/bin/llvm-nm
ENV RANLIB_FOR_TARGET=${CLANG10PATH}/bin/llvm-ranlib
ENV READELF_FOR_TARGET=${CLANG10PATH}/bin/llvm-readelf
ENV CFLAGS_FOR_TARGET="-target ${xtarget} ${xcflags} -Wno-unused-command-line-argument"
ENV AS_FOR_TARGET="${CLANG10PATH}/bin/clang"
WORKDIR /toolchain/build/newlib
RUN echo "--- newlib ---" >&2
RUN /toolchain/newlib/configure \
    --host=`cc -dumpmachine` \
    --build=`cc -dumpmachine` \
    --target=${xtarget} \
    --prefix=${xsysroot} \
    --disable-newlib-supplied-syscalls \
    --enable-newlib-reent-small \
    --disable-newlib-fvwrite-in-streamio \
    --disable-newlib-fseek-optimization \
    --disable-newlib-wide-orient \
    --enable-newlib-nano-malloc \
    --disable-newlib-unbuf-stream-opt \
    --enable-lite-exit \
    --enable-newlib-global-atexit \
    --disable-newlib-nano-formatted-io \
    --disable-newlib-fvwrite-in-streamio \
    --enable-newlib-io-c99-formats \
    --enable-newlib-io-float \
    --disable-newlib-io-long-double \
    --disable-nls
RUN make
RUN make -j1 install; true
RUN mv ${xsysroot}/${xtarget}/* ${xsysroot}/
RUN rm -rf ${xsysroot}/${xtarget}

RUN ln -s /usr/bin/python3 /usr/bin/python

WORKDIR /toolchain/build/compiler-rt
RUN echo "--- compiler-rt ---" >&2
RUN cmake -G Ninja -Wno-dev \
    -DCMAKE_INSTALL_PREFIX=${xsysroot} \
    -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG \
    -DCMAKE_CXX_FLAGS_RELEASE=-DNDEBUG \
    -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
    -DCMAKE_SYSTEM_PROCESSOR=arm \
    -DCMAKE_SYSTEM_NAME=Generic \
    -DCMAKE_CROSSCOMPILING=ON \
    -DCMAKE_CXX_COMPILER_FORCED=TRUE \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER=${CLANG10PATH}/bin/clang \
    -DCMAKE_CXX_COMPILER=${CLANG10PATH}/bin/clang++ \
    -DCMAKE_LINKER=${CLANG10PATH}/bin/clang \
    -DCMAKE_AR=${CLANG10PATH}/bin/llvm-ar \
    -DCMAKE_RANLIB=${CLANG10PATH}/bin/llvm-ranlib \
    -DCMAKE_C_COMPILER_TARGET=${xtarget} \
    -DCMAKE_ASM_COMPILER_TARGET=${xtarget} \
    -DCMAKE_SYSROOT=${xsysroot} \
    -DCMAKE_SYSROOT_LINK=${xsysroot} \
    -DCMAKE_C_FLAGS="${xcflags}" \
    -DCMAKE_ASM_FLAGS="${xcflags}" \
    -DCMAKE_CXX_FLAGS="${xcflags}" \
    -DCMAKE_EXE_LINKER_FLAGS=-L${xsysroot}/lib \
    -DLLVM_CONFIG_PATH=${CLANG10PATH}/bin/llvm-config \
    -DLLVM_DEFAULT_TARGET_TRIPLE=${xtarget} \
    -DLLVM_TARGETS_TO_BUILD=ARM \
    -DLLVM_ENABLE_PIC=OFF \
    -DCOMPILER_RT_OS_DIR=baremetal \
    -DCOMPILER_RT_BUILD_BUILTINS=ON \
    -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
    -DCOMPILER_RT_BUILD_XRAY=OFF \
    -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
    -DCOMPILER_RT_BUILD_PROFILE=OFF \
    -DCOMPILER_RT_BAREMETAL_BUILD=ON \
    -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
    -DCOMPILER_RT_INCLUDE_TESTS=OFF \
    -DCOMPILER_RT_USE_LIBCXX=ON \
    -DUNIX=1 \
    /toolchain/llvm/compiler-rt
RUN ninja
RUN ninja install
RUN mv ${xsysroot}/lib/baremetal/* ${xsysroot}/lib
RUN rmdir ${xsysroot}/lib/baremetal

WORKDIR /toolchain/build/libcxx
RUN echo "--- libcxx ---" >&2
RUN cmake -G Ninja -Wno-dev \
    -DCMAKE_INSTALL_PREFIX=${xsysroot} \
    -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG \
    -DCMAKE_CXX_FLAGS_RELEASE=-DNDEBUG \
    -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
    -DCMAKE_SYSTEM_PROCESSOR=arm \
    -DCMAKE_SYSTEM_NAME=Generic \
    -DCMAKE_CROSSCOMPILING=ON \
    -DCMAKE_CXX_COMPILER_FORCED=TRUE \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER=${CLANG10PATH}/bin/clang \
    -DCMAKE_CXX_COMPILER=${CLANG10PATH}/bin/clang++ \
    -DCMAKE_LINKER=${CLANG10PATH}/bin/clang \
    -DCMAKE_AR=${CLANG10PATH}/bin/llvm-ar \
    -DCMAKE_RANLIB=${CLANG10PATH}/bin/llvm-ranlib \
    -DCMAKE_C_COMPILER_TARGET=${xtarget} \
    -DCMAKE_CXX_COMPILER_TARGET=${xtarget} \
    -DCMAKE_SYSROOT=${xsysroot} \
    -DCMAKE_SYSROOT_LINK=${xsysroot} \
    -DCMAKE_C_FLAGS="${xcxxflags}" \
    -DCMAKE_CXX_FLAGS="${xcxxflags}" \
    -DCMAKE_EXE_LINKER_FLAGS=-L${xcxx_lib} \
    -DLLVM_CONFIG_PATH=${CLANG10PATH}/bin/llvm-config \
    -DLLVM_TARGETS_TO_BUILD=ARM \
    -DLLVM_ENABLE_PIC=OFF \
    -DLIBCXX_ENABLE_ASSERTIONS=OFF \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DLIBCXX_ENABLE_FILESYSTEM=OFF \
    -DLIBCXX_ENABLE_THREADS=OFF \
    -DLIBCXX_ENABLE_MONOTONIC_CLOCK=OFF \
    -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=OFF \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=ON \
    -DLIBCXX_INCLUDE_TESTS=OFF \
    -DLIBCXX_INCLUDE_BENCHMARKS=OFF \
    -DLIBCXX_USE_COMPILER_RT=ON \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_CXX_ABI_INCLUDE_PATHS=/toolchain/llvm/libcxxabi/include \
    -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DUNIX=1 \
    /toolchain/llvm/libcxx
RUN ninja
RUN ninja install

WORKDIR /toolchain/build/libunwind
RUN echo "--- libunwind ---" >&2
RUN cmake -G Ninja -Wno-dev \
    -DCMAKE_INSTALL_PREFIX=${xsysroot} \
    -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG \
    -DCMAKE_CXX_FLAGS_RELEASE=-DNDEBUG \
    -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
    -DCMAKE_SYSTEM_PROCESSOR=arm \
    -DCMAKE_SYSTEM_NAME=Generic \
    -DCMAKE_CROSSCOMPILING=ON \
    -DCMAKE_CXX_COMPILER_FORCED=TRUE \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER=${CLANG10PATH}/bin/clang \
    -DCMAKE_CXX_COMPILER=${CLANG10PATH}/bin/clang++ \
    -DCMAKE_LINKER=${CLANG10PATH}/bin/clang \
    -DCMAKE_AR=${CLANG10PATH}/bin/llvm-ar \
    -DCMAKE_RANLIB=${CLANG10PATH}/bin/llvm-ranlib \
    -DCMAKE_C_COMPILER_TARGET=${xtarget} \
    -DCMAKE_CXX_COMPILER_TARGET=${xtarget} \
    -DCMAKE_SYSROOT=${xsysroot} \
    -DCMAKE_SYSROOT_LINK=${xsysroot} \
    -DCMAKE_C_FLAGS="${xcxxflags} ${xcxxnothread}" \
    -DCMAKE_CXX_FLAGS="${xcxxflags} ${xcxxnothread}" \
    -DCMAKE_EXE_LINKER_FLAGS=-L${xcxx_lib} \
    -DLLVM_CONFIG_PATH=${CLANG10PATH}/bin/llvm-config \
    -DLLVM_ENABLE_PIC=OFF \
    -DLIBUNWIND_ENABLE_ASSERTIONS=OFF \
    -DLIBUNWIND_ENABLE_PEDANTIC=ON \
    -DLIBUNWIND_ENABLE_SHARED=OFF \
    -DLIBUNWIND_ENABLE_THREADS=OFF \
    -DLLVM_ENABLE_LIBCXX=TRUE \
    -DUNIX=1 \
    /toolchain/llvm/libunwind
RUN ninja
RUN ninja install

WORKDIR /toolchain/build/libcxxabi
RUN echo "--- libcxxabi ---" >&2
RUN cmake -G Ninja -Wno-dev \
    -DCMAKE_INSTALL_PREFIX=${xsysroot} \
    -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG \
    -DCMAKE_CXX_FLAGS_RELEASE=-DNDEBUG \
    -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
    -DCMAKE_SYSTEM_PROCESSOR=arm \
    -DCMAKE_SYSTEM_NAME=Generic \
    -DCMAKE_CROSSCOMPILING=ON \
    -DCMAKE_CXX_COMPILER_FORCED=TRUE \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER=${CLANG10PATH}/bin/clang \
    -DCMAKE_CXX_COMPILER=${CLANG10PATH}/bin/clang++ \
    -DCMAKE_LINKER=${CLANG10PATH}/bin/clang \
    -DCMAKE_AR=${CLANG10PATH}/bin/llvm-ar \
    -DCMAKE_RANLIB=${CLANG10PATH}/bin/llvm-ranlib \
    -DCMAKE_C_COMPILER_TARGET=${xtarget} \
    -DCMAKE_CXX_COMPILER_TARGET=${xtarget} \
    -DCMAKE_SYSROOT=${xsysroot} \
    -DCMAKE_SYSROOT_LINK=${xsysroot} \
    -DCMAKE_C_FLAGS="${xcxxflags}" \
    -DCMAKE_CXX_FLAGS="${xcxxflags}" \
    -DCMAKE_EXE_LINKER_FLAGS=-L${xcxx_lib} \
    -DLLVM_CONFIG_PATH=${CLANG10PATH}/bin/llvm-config \
    -DLLVM_ENABLE_PIC=OFF \
    -DLIBCXXABI_ENABLE_ASSERTIONS=OFF \
    -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
    -DLIBCXXABI_USE_COMPILER_RT=ON \
    -DLIBCXXABI_ENABLE_THREADS=OFF \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    -DLIBCXXABI_BAREMETAL=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DLIBCXXABI_SILENT_TERMINATE=ON \
    -DLIBCXXABI_INCLUDE_TESTS=OFF \
    -DLIBCXXABI_LIBCXX_SRC_DIRS=/toolchain/llvm/libcxx \
    -DLIBCXXABI_LIBUNWIND_LINK_FLAGS=-L${xsysroot}/lib \
    -DLIBCXXABI_LIBCXX_PATH=/toolchain/llvm/libcxx \
    -DLIBCXXABI_LIBCXX_INCLUDES=${xsysroot}/include/c++/v1 \
    -DUNIX=1 \
    /toolchain/llvm/libcxxabi
RUN ninja
RUN ninja install

WORKDIR /

FROM alpine:3.10
LABEL description="Cortex-M4F environment"
LABEL maintainer="Emmanuel Blot <emmanuel.blot@free.fr>"
ENV CLANG10PATH=/usr/local/clang10
ENV xtarget=armv7em-none-eabi
ENV xcpudir=cortex-m4f
COPY --from=builder ${CLANG10PATH}/${xtarget}/${xcpudir} \
     ${CLANG10PATH}/${xtarget}/${xcpudir}
WORKDIR /

# docker build -f host/docker/src/clang-cortex-m4f-v10-dev.docker -t clang-cortex-m4f:v10-dev-10 .
# docker tag clang-cortex-m4f:v10-dev-10 ${DOCKERHUB_USER}/clang-cortex-m4f:v10-dev-10
